name: Produce metrics
outputs:
- {name: mlpipeline_metrics, type: Metrics}
implementation:
  container:
    image: python:3.7
    command:
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - |
      def _make_parent_dirs_and_return_path(file_path: str):
          import os
          os.makedirs(os.path.dirname(file_path), exist_ok=True)
          return file_path

      def produce_metrics(
      # Note when the `create_component_from_func` method converts the function to a component, the function parameter "mlpipeline_metrics_path" becomes an output with name "mlpipeline_metrics" which is the correct name for metrics output.
          mlpipeline_metrics_path,
      ):
          import json

          accuracy = 0.9
          metrics = {
              'metrics': [{
              'name': 'accuracy-score', # The name of the metric. Visualized as the column name in the runs table.
              'numberValue':  accuracy, # The value of the metric. Must be a numeric value.
              'format': "PERCENTAGE",   # The optional format of the metric. Supported values are "RAW" (displayed in raw format) and "PERCENTAGE" (displayed in percentage format).
              }]
          }
          with open(mlpipeline_metrics_path, 'w') as f:
              json.dump(metrics, f)

      import argparse
      _parser = argparse.ArgumentParser(prog='Produce metrics', description='')
      _parser.add_argument("--mlpipeline-metrics", dest="mlpipeline_metrics_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
      _parsed_args = vars(_parser.parse_args())

      _outputs = produce_metrics(**_parsed_args)
    args:
    - --mlpipeline-metrics
    - {outputPath: mlpipeline_metrics}
